{"version":3,"sources":["../config.ts","ipc.ts","security.ts","index.ts"],"names":[],"mappings":";AAAa,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,OAAS,CACpB,UAAW,0CACX,SAAU,YACV,UAAW,QAAQ,SAAS,MAAM;;ACDpC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAFA,MAAA,EAAA,QAAA,YAEA,MAAa,EACX,cACO,KAAA,gBACA,KAAA,wBAGA,SAAS,GACT,KAAA,gBAAgB,YAAY,KAAK,eAAgB,GAGhD,wBACN,EAAA,QAAQ,GAAG,oBAAqB,CAAC,EAAa,KACvC,KAAA,gBAAgB,YAAY,KAAK,oBAAqB,KAIvD,gBACA,MAAA,EAAa,EAAA,cAAc,gBAE7B,GAAA,GAAc,EAAW,OAAS,EAC7B,OAAA,EAAW,GAEZ,MAAA,IAAI,MAAM,0BAIZ,gBACD,KAAA,gBAAgB,YAAY,GAAG,gBAAiB,CAAC,EAAG,KACvD,EAAE,iBAEG,EAAI,WAAW,YAGb,KAAA,SAAS,mBAAmB,EAAI,QAAQ,WAAY,OAFzD,EAAA,MAAM,aAAa,MA/B3B,QAAA,WAAA;;ACkCA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IApCA,MAAA,EAAA,QAAA,YACA,EAAA,QAAA,OAUA,SAAgB,IACd,EAAA,IAAI,GAAG,uBAAwB,CAAC,EAAQ,KAEtC,EAAY,GAAG,gBAAiB,CAAC,EAAO,KAChC,MAAA,EAAY,IAAI,EAAA,IAAI,GAEpB,EAAU,EAAU,SAAS,SAAS,aACtC,EAAS,EAAU,SAAS,SAAS,YACrC,EAAgC,SAAvB,EAAU,SAEpB,GAAY,GAAW,IAC1B,QAAQ,gCAAgC,KACxC,QAAQ,iBAAiB,EAAU,YACnC,EAAM,oBAKV,EAAY,GAAG,aAAc,CAAC,EAAO,KACnC,QAAQ,iCAAiC,KACzC,EAAM,qBApBZ,QAAA,UAAA;;AC2FC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,MAAA,EAAA,QAAA,SAtGD,EAAA,QAAA,YACA,EAAA,EAAA,aAAA,QAAA,gCAEA,EAAA,QAAA,aACA,EAAA,QAAA,SACA,EAAA,QAAA,cAIA,IAAI,EACA,EAEJ,GAAI,QAAQ,kCAEL,CACC,MAAA,EAAe,UACb,MAAA,EAAoB,QAAQ,yBAClC,QAAQ,wBAAR,GAEM,MAAA,EAAkB,EAAkB,CACxC,aAAc,KACd,cAAe,MAIjB,EAAa,IAAI,EAAA,cAAc,CAC7B,EAAG,EAAgB,EACnB,EAAG,EAAgB,EACnB,MAAO,EAAgB,MACvB,OAAQ,EAAgB,OACxB,OAAQ,EAAA,OAAO,UACf,UAAW,IACX,SAAU,IACV,cAAoC,WAArB,QAAQ,SAAwB,mBAAgB,EAC/D,eAAgB,CACd,YAAY,KAIhB,EAAgB,OAAO,GAGvB,EAAW,SAAS,qBAGhB,EAAA,OAAO,kBACH,EAAA,QAAiB,EAAA,uBACvB,EAAW,YAAY,gBAIzB,EAAW,GAAG,SAAU,KAItB,EAAa,OAGf,EAAa,IAAI,EAAA,YAInB,EAAA,IAAI,GAAG,wBAAyB,KAC9B,EAAA,IAAI,GAAG,YAAa,CAAC,EAAO,KAC1B,EAAM,iBAEG,SAAA,IACH,EACF,EAAW,SAAS,GAEpB,WAAW,EAAe,KAI9B,OAOJ,EAAA,IAAI,GAAG,QAAS,KACd,EAAA,YACA,MAIF,EAAA,IAAI,GAAG,oBAAqB,KAGD,WAArB,QAAQ,UACV,EAAA,IAAI,SAIR,EAAA,IAAI,GAAG,WAAY,KAGE,OAAf,GACF","file":"index.map","sourceRoot":"..\\..\\src\\main","sourcesContent":["export const config = {\r\n  cooperUrl: 'https://desktop-build-bot.herokuapp.com',\r\n  teamName: 'tinyspeck',\r\n  isDevMode: process.execPath.match(/[\\\\/]electron/)\r\n};\r\n","import { ipcMain, shell, BrowserWindow } from 'electron';\r\n\r\nexport class IpcManager {\r\n  constructor() {\r\n    this.setupFileDrop();\r\n    this.setupProcessingStatus();\r\n  }\r\n\r\n  public openFile(path: string) {\r\n    this.getMainWindow().webContents.send('file-dropped', path);\r\n  }\r\n\r\n  private setupProcessingStatus() {\r\n    ipcMain.on('processing-status', (_event: any, status: any) => {\r\n      this.getMainWindow().webContents.send('processing-status', status);\r\n    });\r\n  }\r\n\r\n  private getMainWindow(): Electron.BrowserWindow {\r\n    const allWindows = BrowserWindow.getAllWindows();\r\n\r\n    if (allWindows && allWindows.length > 0) {\r\n      return allWindows[0];\r\n    } else {\r\n      throw new Error('Could not find window!');\r\n    }\r\n  }\r\n\r\n  private setupFileDrop() {\r\n    this.getMainWindow().webContents.on('will-navigate', (e, url) => {\r\n      e.preventDefault();\r\n\r\n      if (!url.startsWith('file:///')) {\r\n        shell.openExternal(url);\r\n      } else {\r\n        this.openFile(decodeURIComponent(url.replace('file:///', '/')));\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { app } from 'electron';\r\nimport { URL } from 'url';\r\n\r\n// tslint:disable:no-console\r\n\r\n/**\r\n * Attempts to secure the app by disallowing things we do\r\n * not need.\r\n *\r\n * @export\r\n */\r\nexport function secureApp() {\r\n  app.on('web-contents-created', (_event, webContents) => {\r\n    // Disallow navigation\r\n    webContents.on('will-navigate', (event, url) => {\r\n      const parsedUrl = new URL(url);\r\n\r\n      const isSlack = parsedUrl.hostname.endsWith('slack.com');\r\n      const isOkta = parsedUrl.hostname.endsWith('okta.com');\r\n      const isFile = parsedUrl.protocol === 'file';\r\n\r\n      if (!isSlack && !isOkta && !isFile) {\r\n        console.warn(`Prevented navigation to ${url}`);\r\n        console.log(`Hostname: ${parsedUrl.hostname}`);\r\n        event.preventDefault();\r\n      }\r\n    });\r\n\r\n    // Disallow new-window\r\n    webContents.on('new-window', (event, url) => {\r\n      console.warn(`Prevented new-window for ${url}`);\r\n      event.preventDefault();\r\n    });\r\n  });\r\n}\r\n\r\n// tslint:enable:no-console\r\n","import { app, BrowserWindow } from 'electron';\r\nimport installExtension, { REACT_DEVELOPER_TOOLS } from 'electron-devtools-installer';\r\n\r\nimport { config } from '../config';\r\nimport { IpcManager } from './ipc';\r\nimport { secureApp } from './security';\r\n\r\n// Keep a global reference of the window object, if you don't, the window will\r\n// be closed automatically when the JavaScript object is garbage collected.\r\nlet mainWindow: Electron.BrowserWindow | null;\r\nlet ipcManager: IpcManager;\r\n\r\nif (require('electron-squirrel-startup')) {\r\n  // No-op, we're done here\r\n} else {\r\n  const createWindow = async () => {\r\n    const windowStateKeeper = require('electron-window-state');\r\n    require('electron-context-menu')();\r\n\r\n    const mainWindowState = windowStateKeeper({\r\n      defaultWidth: 1200,\r\n      defaultHeight: 800\r\n    });\r\n\r\n    // Create the browser window.\r\n    mainWindow = new BrowserWindow({\r\n      x: mainWindowState.x,\r\n      y: mainWindowState.y,\r\n      width: mainWindowState.width,\r\n      height: mainWindowState.height,\r\n      show: !!config.isDevMode,\r\n      minHeight: 500,\r\n      minWidth: 1000,\r\n      titleBarStyle: process.platform === 'darwin' ? 'hiddenInset' : undefined,\r\n      webPreferences: {\r\n        webviewTag: false\r\n      }\r\n    });\r\n\r\n    mainWindowState.manage(mainWindow);\r\n\r\n    // and load the index.html of the app.\r\n    mainWindow.loadFile('./dist/index.html');\r\n\r\n    // Open the DevTools.\r\n    if (config.isDevMode) {\r\n      await installExtension(REACT_DEVELOPER_TOOLS);\r\n      mainWindow.webContents.openDevTools();\r\n    }\r\n\r\n    // Emitted when the window is closed.\r\n    mainWindow.on('closed', () => {\r\n      // Dereference the window object, usually you would store windows\r\n      // in an array if your app supports multi windows, this is the time\r\n      // when you should delete the corresponding element.\r\n      mainWindow = null;\r\n    });\r\n\r\n    ipcManager = new IpcManager();\r\n  };\r\n\r\n  // Whenever the app has finished launching\r\n  app.on('will-finish-launching', () => {\r\n    app.on('open-file', (event, path) => {\r\n      event.preventDefault();\r\n\r\n      function openWhenReady() {\r\n        if (ipcManager) {\r\n          ipcManager.openFile(path);\r\n        } else {\r\n          setTimeout(openWhenReady, 500);\r\n        }\r\n      }\r\n\r\n      openWhenReady();\r\n    });\r\n  });\r\n\r\n  // This method will be called when Electron has finished\r\n  // initialization and is ready to create browser windows.\r\n  // Some APIs can only be used after this event occurs.\r\n  app.on('ready', () => {\r\n    secureApp();\r\n    createWindow();\r\n  });\r\n\r\n  // Quit when all windows are closed.\r\n  app.on('window-all-closed', () => {\r\n    // On OS X it is common for applications and their menu bar\r\n    // to stay active until the user quits explicitly with Cmd + Q\r\n    if (process.platform !== 'darwin') {\r\n      app.quit();\r\n    }\r\n  });\r\n\r\n  app.on('activate', () => {\r\n    // On OS X it's common to re-create a window in the app when the\r\n    // dock icon is clicked and there are no other windows open.\r\n    if (mainWindow === null) {\r\n      createWindow();\r\n    }\r\n  });\r\n}\r\n"]}